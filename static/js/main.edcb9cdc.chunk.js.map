{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","sortedGoods","goods","visibleGoods","sort","a","b","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,4EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAoCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EA7BD,SACLC,EADK,GAGJ,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAENI,EAAY,YAAOD,GAkBzB,OAhBAC,EAAaC,MAAK,SAACC,EAAGC,GACpB,OAAQT,GACN,KAAKL,EAASe,SACZ,OAAOF,EAAEG,cAAcF,GAEzB,KAAKd,EAASiB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OACtB,QACE,OAAO,MAITX,GACFI,EAAaQ,UAGRR,EAOaS,CAAkBnB,EAAiB,CACrDI,WACAE,eAgBF,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IAAW,iBACT,CACE,WAAYlB,IAAaL,EAASe,WAGxCS,QAAS,WACPlB,EAAYN,EAASe,WATzB,iCAeA,wBACEO,KAAK,SACLD,UACEE,IAAW,oBACT,CACE,WAAYlB,IAAaL,EAASiB,SAGxCO,QAAS,WACPlB,EAAYN,EAASiB,SATzB,4BAeA,wBACEK,KAAK,SACLD,UACEE,IAAW,oBACT,CACE,YAAahB,IAGnBiB,QAAS,WApDbhB,GADED,IA6CA,sBAgBGF,IAAaL,EAASI,MAAQG,IAC7B,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAAS,WAzDnBlB,EAAYN,EAASI,MACrBI,GAAc,IAqDN,sBAaN,6BAEIC,EAAYgB,KAAI,SAAAC,GACd,OACE,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YC5IvBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.edcb9cdc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport classNames from 'classnames';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((a, b) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return a.localeCompare(b);\n\n      case SortType.LENGTH:\n        return a.length - b.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const sortedGoods = getReorderedGoods(goodsFromServer, {\n    sortType,\n    isReversed,\n  });\n\n  const changeReverseStatus = () => {\n    if (isReversed) {\n      setIsReversed(false);\n    } else {\n      setIsReversed(true);\n    }\n  };\n\n  const resetSorterParameters = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            classNames('button is-info',\n              {\n                'is-light': sortType !== SortType.ALPHABET,\n              })\n          }\n          onClick={() => {\n            setSortType(SortType.ALPHABET);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            classNames('button is-success',\n              {\n                'is-light': sortType !== SortType.LENGTH,\n              })\n          }\n          onClick={() => {\n            setSortType(SortType.LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            classNames('button is-warning',\n              {\n                'is-light': !isReversed,\n              })\n          }\n          onClick={() => {\n            changeReverseStatus();\n          }}\n        >\n          Reverse\n        </button>\n\n        {\n          (sortType !== SortType.NONE || isReversed) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                resetSorterParameters();\n              }}\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n\n      <ul>\n        {\n          sortedGoods.map(good => {\n            return (\n              <li key={good} data-cy=\"Good\">\n                {good}\n              </li>\n            );\n          })\n        }\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}